#--------------------------------------------------
#  发布 Laravel 到生产环境
#
#  使用了GitHub Action Runner和自托管的Runner
#  本文件由脚本生成，并自动更新到所有项目文件夹中
#--------------------------------------------------
#

name: Deploy Laravel

# 全局变量会对Laravel的.env文件产生影响，尽量不和.env中的变量重名
env:
  DEPLOY_OWNER: www
  SSH_USER: root
  WEB_DIR: /www/wwwroot
  MYSQL_VERSION: "8.0"
  PHP_VERSION: "8.0"
  NPM_BUILD: true

on:
  push:
    branches: [main, develop]
    tags:
      - "*"

#-cuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuut-#
#-------------------------------------------------------------
#  这块注释以及以下代码由脚本自动复制到此处，不要改动
#  如需改动，在control.api4.top/.script/deploy_laravel.yml中改动
#-------------------------------------------------------------

jobs:
  set-deploy-variables:
    runs-on: self-hosted
    steps:
      - name: 当前用户
        run: whoami
      - name: 当前路径
        run: pwd
      - name: 复制deploy_host文件
        run: source /www/deploy.env && echo $HOST_IP > ./deploy_host
      - name: 上传deploy_host文件
        uses: actions/upload-artifact@v2
        with:
          name: deploy_host
          path: deploy_host
          retention-days: 1
      - name: 复制deploy_key文件
        run: source /www/deploy.env && echo -e $DEPLOY_KEY > ./deploy_key
      - name: 上传deploy_key文件
        uses: actions/upload-artifact@v2
        with:
          name: deploy_key
          path: deploy_key
          retention-days: 1
      - name: 复制deploy_env文件
        run: cp /www/deploy.env ./deploy_env
      - name: 上传deploy_env文件
        uses: actions/upload-artifact@v2
        with:
          name: deploy_env
          path: deploy_env
          retention-days: 1

  set-variables:
    runs-on: ubuntu-latest
    outputs:
      database_name: ${{ steps.step1.outputs.database_name }}
      release_dir: ${{ steps.step2.outputs.release_dir }}
      horizon_installed: ${{ steps.step3.outputs.horizon_installed }}
      opcache_installed: ${{ steps.step4.outputs.opcache_installed }}
      deploy_dir: ${{ steps.step5.outputs.deploy_dir }}
      deploy_dir_name: ${{ steps.step6.outputs.deploy_dir_name }}
      need_npm_build: ${{ steps.step7.outputs.need_npm_build }}
      deploy: ${{ steps.step8.outputs.deploy }}
    steps:
      - name: 当前用户
        run: whoami
      - name: 下载项目
        uses: actions/checkout@v2.3.5
      - name: 生成数据库名
        id: step1
        run: |
          name=${{ github.event.repository.name }}
          new=${name//./_}
          echo -e "::set-output name=database_name::${new}"
      - name: 生成发布文件夹名称
        id: step2
        run: |
          name="${{ env.WEB_DIR }}/releases/${{ github.event.repository.name }}_$(date +"release_%Y%m%d%H%M%S")"
          echo -e "::set-output name=release_dir::${name}"
          echo $name > release_dir
      - name: 上传release_dir文件
        uses: actions/upload-artifact@v2
        with:
          name: release_dir
          path: release_dir
          retention-days: 1
      - name: 判断是否安装了Laravel Horizon
        id: step3
        run: |
          if [[ -f "artisan" ]] && [[ -f "composer.json" ]] && grep -q "horizon" composer.json ; then
            horizon=true
            echo '安装了horizon'
          else
            horizon=''
            echo '未安装horizon'
          fi
          echo -e "::set-output name=horizon_installed::${horizon}"
      - name: 判断是否安装了Opcache扩展包
        id: step4
        run: |
          if [[ -f "artisan" ]] && [[ -f "composer.json" ]] && grep -q "opcache" composer.json ; then
            opcache=true
            echo '安装了opcahe扩展包'
          else
            opcache=''
            echo '未安装opcache扩展包'
          fi
          echo -e "::set-output name=opcache_installed::${opcache}"
      - name: 生成部署文件夹路径
        id: step5
        run: |
          name="/www/wwwroot/${{ github.event.repository.name }}"
          echo -e "::set-output name=deploy_dir::${name}"
          echo $name > deploy_dir
      - name: 上传deploy_dir文件
        uses: actions/upload-artifact@v2
        with:
          name: deploy_dir
          path: deploy_dir
          retention-days: 1
      - name: 生成部署文件夹名称
        id: step6
        run: |
          name=${{ github.event.repository.name }}
          echo -e "::set-output name=deploy_dir_name::${name}"
          echo $name > deploy_dir_name
      - name: 上传deploy_dir_name文件
        uses: actions/upload-artifact@v2
        with:
          name: deploy_dir_name
          path: deploy_dir_name
          retention-days: 1
      - name: 判断是否需要执行NPM构建
        id: step7
        run: echo -e "::set-output name=need_npm_build::$NPM_BUILD"
      - name: 判断是否需要部署
        id: step8
        run: |
          if [[ -f "do_not_deploy" ]]; then
            deploy=false
            echo 'do_not_deploy文件存在，无需部署'
          else
            deploy=true
          fi
          echo -e "::set-output name=deploy::${deploy}"

  need-deploy:
    runs-on: ubuntu-latest
    needs: [set-variables]
    if: needs.set-variables.outputs.deploy
    steps:
      - name: 当前用户
        run: whoami

  fix-code:
    runs-on: ubuntu-latest
    needs: [set-variables, set-deploy-variables, need-deploy]
    steps:
      - name: 当前用户
        run: whoami
      - name: 配置PHP环境
        uses: shivammathur/setup-php@2.10.0
        with:
          php-version: ${{ env.PHP_VERSION }}
      - name: 配置Redis环境
        uses: supercharge/redis-github-action@1.2.0
      - name: 下载项目
        uses: actions/checkout@v2.3.5
        with:
          ref: "main"
      - name: 安装PHP依赖
        run: composer install --prefer-dist --optimize-autoloader
      - name: 安装用于检查代码的扩展包
        run: |
          if [[ -f "artisan" ]] && [[ -f "composer.json" ]] && grep -q "laravel-hammer" composer.json ; then
            echo '已安装 fix 命令'
          else
            echo '未安装 fix 命令'
            composer require nookery/laravel-hammer
            if [ -n "$(git status -s)" ]; then
              git config --global user.email "action@github.com"
              git config --global user.name "GitHub Action"
              git add --all
              git commit -m "--自动安装辅助工具包--"
              git push
            fi
          fi
      - name: 检查代码
        run: |
          php artisan fix

          if [ -n "$(git status -s)" ]; then
            git config --global user.email "action@github.com"
            git config --global user.name "GitHub Action"
            git pull
            git add --all
            git commit -m "--自动修正代码风格--"
            git push
          fi

  install-opcache-package:
    runs-on: ubuntu-latest
    needs: [set-variables, set-deploy-variables, need-deploy]
    env:
      OPCACHE: ${{ needs.set-variables.outputs.opcache_installed }}
    steps:
      - name: 当前用户
        run: whoami
      - name: 部署PHP环境
        uses: shivammathur/setup-php@2.10.0
        with:
          php-version: ${{ env.PHP_VERSION }}
      - name: 下载项目
        uses: actions/checkout@v2.3.5
        with:
          ref: "main"
      - name: 安装opcache扩展包
        run: |
          if [[ $OPCACHE == '' ]] ; then
            echo '安装opcache扩展包'
            git pull
            composer require appstract/laravel-opcache
          fi

          if [ -n "$(git status -s)" ]; then
            git config --global user.email "action@github.com"
            git config --global user.name "GitHub Action"
            git add --all
            git commit -m "--自动安装清理opcache缓存的扩展包--"
            git push
          fi

  npm-build:
    runs-on: ubuntu-latest
    needs: [set-variables, set-deploy-variables, need-deploy]
    if: needs.set-variables.outputs.need_npm_build
    steps:
      - name: 当前用户
        run: whoami
      - name: 缓存NPM依赖库
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: 下载项目
        uses: actions/checkout@v2.3.5
      - name: 安装NPM依赖
        run: npm install
      - name: NPM 构建
        run: npm run production
      - name: 上传NPM构件
        uses: actions/upload-artifact@v2
        with:
          name: npm
          path: |
            public/build
            public/css
            public/js
            public/mix-manifest.json
          retention-days: 1

  make-env:
    runs-on: ubuntu-latest
    needs: [set-variables, set-deploy-variables, need-deploy]
    env:
      DB_DATABASE: ${{ needs.set-variables.outputs.database_name }}
      TARGET: .env
      APP_URL: http://${{ github.event.repository.name }}
    steps:
      - name: 当前用户
        run: whoami
      - name: 下载项目
        uses: actions/checkout@v2.3.5
      - name: 下载deploy_env
        uses: actions/download-artifact@v2
        with:
          name: deploy_env
      - name: 复制.env文件模板
        run: cp .env.example .env
      - name: 生成.env文件
        run: |
          # 加载变量
          source ./deploy_env
          # 将所有变量存入文件，用于下文判断变量是否存在
          env > env.txt && cat ./deploy_env env.txt > variables.txt
          echo -e "\033[32m---- 将${TARGET}文件中的环境变量替换成配置的值 ----\033[0m"
          # 找出配置文件中的所有的环境变量并存入数组中
          keys=$(eval echo $(sed -n "s/{{\([A-Z0-9a-z_]\{1,200\}\)}}$/\1/p" "$TARGET" | grep -o -e =.*|awk -F = '{ print $2 }'));
          array=(${keys// / })
          # 逐个替换
          hasError=false
          for key in ${array[@]}; do
              eval value=\$"${key}"
              # 转义value中的特殊字符（比如&符号，不转义会被下面的sed命令识别成特殊符号）
              value=${value/\&/\\&}
              if grep -q "^$key=" variables.txt ; then
                # 找出配置文件中的环境变量，并替换，请根据实际的格式修改这里的表达式
                echo -e "- 替换${key}"
                sed -i "s#{{$key}}#$value#" "$TARGET"
              else
                echo -e "\033[5;31m- $key的值未配置 \033[0m"
                hasError=true
              fi
          done
          if [ $hasError == true ];then
            echo -e "\033[5;31m---- 部分变量值未配置 \r\n \033[0m"
            exit 1
          fi
          echo -e "\033[32m---- 环境变量替换处理完成\r\n\033[0m"
      - name: 上传.env构件
        uses: actions/upload-artifact@v2
        with:
          name: .env
          path: .env
          retention-days: 1

  # make-database:
  #   needs: [set-variables, set-deploy-variables]
  #   runs-on: self-hosted
  #   env:
  #     DATABASE_NAME: ${{ needs.set-variables.outputs.database_name }}
  #   steps:
  #     - name: 当前用户
  #       run: whoami
  #     - name: 新建数据库
  #       run: |
  #         if [[ -f $WEB_DIR/www.api4.top/artisan ]]; then
  #           php $WEB_DIR/www.api4.top/artisan make:database $DATABASE_NAME
  #         else
  #           echo -e "$WEB_DIR/www.api4.top/artisan不存在，不检查数据库"
  #         fi

  tests:
    runs-on: ubuntu-latest
    needs: [
        fix-code,
        make-env,
        # make-database,
        install-opcache-package,
        npm-build,
        set-variables,
      ]
    steps:
      - name: 当前用户
        run: whoami
      - name: 下载项目
        uses: actions/checkout@v2.3.5
      - name: 配置Redis环境
        uses: supercharge/redis-github-action@1.2.0
      - name: 配置PHP环境
        uses: shivammathur/setup-php@2.10.0
        with:
          php-version: ${{ env.PHP_VERSION }}
      - name: 配置MySQL环境
        uses: mirromutth/mysql-action@v1.1
        with:
          character set server: "utf8"
          collation server: "utf8_general_ci"
          mysql version: ${{ env.MYSQL_VERSION }}
          mysql database: "github_action_test_database"
          mysql root password: "magic888"
      - name: 复制.env模板
        uses: nookery/laravel-cp-env-action@main
      - name: 生成.env文件
        uses: nookery/env-replace-action@main
        env:
          APP_URL: "127.0.0.1"
          APP_DEBUG: true
          DB_USERNAME: root
          DB_PORT: 3306
          DB_PASSWORD: "magic888"
          DB_HOST: "127.0.0.1"
          DB_DATABASE: "github_action_test_database"
          REDIS_HOST: "127.0.0.1"
          REDIS_PASSWORD: ""
      - name: 上传.env构件
        uses: actions/upload-artifact@v2
        with:
          name: .env.test
          path: .env
          retention-days: 1
      - name: 下载NPM构件
        if: needs.set-variables.outputs.need_npm_build
        uses: actions/download-artifact@v2
        with:
          name: npm
          path: public/
      - name: 安装PHP依赖
        run: composer install --prefer-dist --optimize-autoloader
      - name: 优化项目
        run: php artisan optimize:clear && composer dump
      - name: 执行数据库迁移
        run: php artisan migrate --force --seed
      - name: 执行单元测试
        run: php artisan test

  load-release-cache:
    needs: [tests, set-variables]
    runs-on: self-hosted
    steps:
      - name: 当前用户
        run: whoami
      - name: 下载release_dir构件
        uses: actions/download-artifact@v2
        with:
          name: release_dir
      - name: 设置RELEASE_DIR变量
        run: echo "RELEASE_DIR=$(cat release_dir)" >> $GITHUB_ENV
      - name: 将上一个版本的文件复制到本版本
        run: |
          if [[ -d "$DEPLOY_DIR" ]]; then
            cp -Lr $DEPLOY_DIR $RELEASE_DIR
            chown -R ${{ env.DEPLOY_OWNER }}:${{ env.DEPLOY_OWNER }} $RELEASE_DIR
          fi

  sync-if-tagged:
    needs: [load-release-cache, set-variables]
    runs-on: ubuntu-latest
    # if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: 当前用户
        run: whoami
      - name: 配置PHP环境
        uses: shivammathur/setup-php@2.10.0
        with:
          php-version: ${{ env.PHP_VERSION }}
      - name: 下载release_dir构件
        uses: actions/download-artifact@v2
        with:
          name: release_dir
      - name: 设置RELEASE_DIR变量
        run: echo "RELEASE_DIR=$(cat release_dir)" >> $GITHUB_ENV
      - name: 下载项目
        uses: actions/checkout@v2.3.5
      - name: 下载 .env 文件
        uses: actions/download-artifact@v2
        with:
          name: .env
      - name: 下载NPM构件
        if: needs.set-variables.outputs.need_npm_build
        uses: actions/download-artifact@v2
        with:
          name: npm
          path: public/
      - name: 下载deploy_key
        uses: actions/download-artifact@v2
        with:
          name: deploy_key
      - name: 下载deploy_host
        uses: actions/download-artifact@v2
        with:
          name: deploy_host
      - name: 安装 PHP 依赖
        run: composer install --no-ansi --no-interaction --no-scripts --no-dev --prefer-dist --optimize-autoloader
      - name: 检查RELEASE_DIR
        run: |
          if [[ $RELEASE_DIR == '' ]]; then
            echo -e "RELEASE_DIR错误"
            exit 1
          fi
      - name: 同步到目标服务器
        run: |
          chmod 600 deploy_key
          host=$(cat deploy_host)
          rsync --chown=${{ env.DEPLOY_OWNER }}:${{ env.DEPLOY_OWNER }} \
            -a \
            --chmod=755 \
            --delete \
            --exclude="/deploy_key" \
            --exclude="/node_modules/" \
            -tt -rltgoDzvO \
            -e "ssh -i ./deploy_key -p 22 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" \
            ./ $SSH_USER@$host:$RELEASE_DIR

  link:
    needs: [sync-if-tagged]
    runs-on: self-hosted
    steps:
      - name: 当前用户
        run: whoami
      - name: 下载release_dir构件
        uses: actions/download-artifact@v2
        with:
          name: release_dir
      - name: 设置RELEASE_DIR变量
        run: echo "RELEASE_DIR=$(cat release_dir)" >> $GITHUB_ENV
      - name: 下载deploy_dir构件
        uses: actions/download-artifact@v2
        with:
          name: deploy_dir
      - name: 设置DEPLOY_DIR变量
        run: echo "DEPLOY_DIR=$(cat deploy_dir)" >> $GITHUB_ENV
      - name: 删除deploy_dir构件
        run: rm -rf deploy_dir
      - name: 设置软链接
        run: cd $RELEASE_DIR && cd .. && ln -snf $RELEASE_DIR $DEPLOY_DIR

  run:
    needs: [link]
    runs-on: self-hosted
    steps:
      - name: 当前用户
        run: whoami
      - name: 下载deploy_dir构件
        uses: actions/download-artifact@v2
        with:
          name: deploy_dir
      - name: 设置DEPLOY_DIR变量
        run: echo "DEPLOY_DIR=$(cat deploy_dir)" >> $GITHUB_ENV
      - name: 删除deploy_dir构件
        run: rm -rf deploy_dir
      - name: 下载deploy_dir_name构件
        uses: actions/download-artifact@v2
        with:
          name: deploy_dir_name
      - name: 设置DEPLOY_DIR_NAME变量
        run: echo "DEPLOY_DIR_NAME=$(cat deploy_dir_name)" >> $GITHUB_ENV
      - name: 删除deploy_dir_name构件
        run: rm -rf deploy_dir_name
      - name: 执行自定义命令
        run: |
          if [ -f "$DEPLOY_DIR/run.sh" ]; then
            cd $DEPLOY_DIR && sh run.sh
          else
            echo '不存在run.sh文件'
          fi

  clear-opcache-if-possible:
    needs: [link]
    runs-on: self-hosted
    if: needs.set-variables.outputs.opcache_installed
    steps:
      - name: 当前用户
        run: whoami
      - name: 下载deploy_dir构件
        uses: actions/download-artifact@v2
        with:
          name: deploy_dir
      - name: 设置DEPLOY_DIR变量
        run: echo "DEPLOY_DIR=$(cat deploy_dir)" >> $GITHUB_ENV
      - name: 删除deploy_dir构件
        run: rm -rf deploy_dir
      - name: 清理opcache缓存
        run: |
          {
            docker exec php php $DEPLOY_DIR/artisan opcache:clear
          } || {
            echo '执行失败'
          }

  migrate:
    runs-on: self-hosted
    needs: [link]
    steps:
      - name: 当前用户
        run: whoami
      - name: 下载deploy_dir构件
        uses: actions/download-artifact@v2
        with:
          name: deploy_dir
      - name: 设置DEPLOY_DIR变量
        run: echo "DEPLOY_DIR=$(cat deploy_dir)" >> $GITHUB_ENV
      - name: 删除deploy_dir构件
        run: rm -rf deploy_dir
      - name: 执行数据库迁移
        run: docker exec php php $DEPLOY_DIR/artisan migrate --force

  optimize:
    needs: [link]
    runs-on: self-hosted
    steps:
      - name: 当前用户
        run: whoami
      - name: 下载deploy_dir构件
        uses: actions/download-artifact@v2
        with:
          name: deploy_dir
      - name: 设置DEPLOY_DIR变量
        run: echo "DEPLOY_DIR=$(cat deploy_dir)" >> $GITHUB_ENV
      - name: 删除deploy_dir构件
        run: rm -rf deploy_dir
      - name: Artisan 命令列表
        run: docker exec php php $DEPLOY_DIR/artisan list
      - name: 清理缓存
        run: docker exec php php $DEPLOY_DIR/artisan optimize:clear
      - name: 生成缓存
        run: docker exec php php $DEPLOY_DIR/artisan optimize

  set-git-remote:
    needs: [link]
    runs-on: self-hosted
    steps:
      - name: 当前用户
        run: whoami
      - name: 下载deploy_dir构件
        uses: actions/download-artifact@v2
        with:
          name: deploy_dir
      - name: 设置DEPLOY_DIR变量
        run: echo "DEPLOY_DIR=$(cat deploy_dir)" >> $GITHUB_ENV
      - name: 删除deploy_dir构件
        run: rm -rf deploy_dir
      - name: 设置远程仓库
        run: sed -i "s#https://github.com/#git@github.com:#" $DEPLOY_DIR/.git/config
      - name: Git配置
        run: cd $DEPLOY_DIR && git config pull.ff only

  # set-hosts:
  #   needs: [link]
  #   runs-on: self-hosted
  #   steps:
  #     - name: 当前用户
  #       run: whoami
  #     - name: 下载deploy_dir_name构件
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: deploy_dir_name
  #     - name: 设置DEPLOY_DIR_NAME变量
  #       run: echo "DEPLOY_DIR_NAME=$(cat deploy_dir_name)" >> $GITHUB_ENV
  #     - name: 删除deploy_dir_name构件
  #       run: rm -rf deploy_dir_name
  #     - name: 设置本地Hosts文件
  #       run: |
  #         whoami
  #         cat /etc/hosts > hosts.txt
  #         if grep -q "$DEPLOY_DIR_NAME" hosts.txt ; then
  #           echo "现有hosts文件中已经配置了$DEPLOY_DIR_NAME"
  #         else
  #           echo -e "127.0.0.1 $DEPLOY_DIR_NAME \r\n" >> /etc/hosts
  #         fi
  #         rm -rf hosts.txt

  artisan-update:
    needs: [migrate, optimize, set-variables, clear-opcache-if-possible]
    runs-on: self-hosted
    steps:
      - name: 当前用户
        run: whoami
      - name: 下载deploy_dir构件
        uses: actions/download-artifact@v2
        with:
          name: deploy_dir
      - name: 设置DEPLOY_DIR变量
        run: echo "DEPLOY_DIR=$(cat deploy_dir)" >> $GITHUB_ENV
      - name: 删除deploy_dir构件
        run: rm -rf deploy_dir
      - name: Artisan 命令列表
        run: docker exec php php $DEPLOY_DIR/artisan list
      - name: 执行php artisan update
        run: |
          {
            docker exec php php $DEPLOY_DIR/artisan update
          } || {
            echo '未定义update命令或已定义但执行失败'
          }
      - name: 改文件夹权限
        run: chown -R ${{ env.DEPLOY_OWNER }}:${{ env.DEPLOY_OWNER }} $DEPLOY_DIR

  restart-horizon-if-installed:
    needs: [migrate, optimize, set-variables, clear-opcache-if-possible]
    runs-on: self-hosted
    if: needs.set-variables.outputs.horizon_installed
    steps:
      - name: 当前用户
        run: whoami
      - name: 下载deploy_dir构件
        uses: actions/download-artifact@v2
        with:
          name: deploy_dir
      - name: 设置DEPLOY_DIR变量
        run: echo "DEPLOY_DIR=$(cat deploy_dir)" >> $GITHUB_ENV
      - name: 删除deploy_dir构件
        run: rm -rf deploy_dir
      - name: 当前路径
        run: cd $DEPLOY_DIR && pwd
      - name: 发送停止 Laravel Horizon 的指令
        run: docker exec php php $DEPLOY_DIR/artisan horizon:terminate

  register-app:
    needs: [migrate, optimize, set-variables, clear-opcache-if-possible]
    runs-on: self-hosted
    steps:
      - name: 当前用户
        run: whoami
      - name: 下载deploy_dir构件
        uses: actions/download-artifact@v2
        with:
          name: deploy_dir
      - name: 设置DEPLOY_DIR变量
        run: echo "DEPLOY_DIR=$(cat deploy_dir)" >> $GITHUB_ENV
      - name: 当前路径
        run: cd $DEPLOY_DIR && pwd
      - name: 注册APP到快易查
        run: |
          {
            docker exec php php ${WEB_DIR}/www.api4.top/artisan app:register ${{ github.event.repository.name }}
          } || {
            echo '执行失败'
          }

  clear-releases:
    needs: [migrate, optimize, set-variables, clear-opcache-if-possible]
    runs-on: self-hosted
    steps:
      - name: 当前用户
        run: whoami
      - name: 下载release_dir构件
        uses: actions/download-artifact@v2
        with:
          name: release_dir
      - name: 设置RELEASE_DIR变量
        run: echo "RELEASE_DIR=$(cat release_dir)" >> $GITHUB_ENV
      - name: 下载deploy_dir构件
        uses: actions/download-artifact@v2
        with:
          name: deploy_dir
      - name: 设置DEPLOY_DIR变量
        run: echo "DEPLOY_DIR=$(cat deploy_dir)" >> $GITHUB_ENV
      - name: 删除deploy_dir构件
        run: rm -rf deploy_dir
      - name: 下载deploy_dir_name构件
        uses: actions/download-artifact@v2
        with:
          name: deploy_dir_name
      - name: 设置DEPLOY_DIR_NAME变量
        run: echo "DEPLOY_DIR_NAME=$(cat deploy_dir_name)" >> $GITHUB_ENV
      - name: 清理多余版本
        run: |
          # 保留的版本个数
          KEEP_COUNT=1

          if [[ $DEPLOY_DIR_NAME == '' ]]; then
            echo "未配置 DEPLOY_DIR_NAME"
            exit 1
          fi
          if [[ $RELEASE_DIR == '' ]]; then
            echo "RELEASE_DIR错误"
            exit 1
          fi
          cd $RELEASE_DIR && cd ..
          RELEASE_COUNT=$(cd ${RELEASE_DIR} && cd .. && find $PWD -maxdepth 1 | grep "${DEPLOY_DIR_NAME}_release_*" -c)
          echo -e "目前在工作目录有 ${RELEASE_COUNT} 个版本\n"
          if [ "${RELEASE_COUNT}" -gt ${KEEP_COUNT} ]; then
            ((DELETE_COUNT=${RELEASE_COUNT}-${KEEP_COUNT}))
            echo -e "删除${DELETE_COUNT}个最早的版本\n"
            cd ${RELEASE_DIR} && cd ..
            TARGET=$(find $PWD -maxdepth 1 | grep "${DEPLOY_DIR_NAME}_release_*" | sort --human-numeric-sort | head -${DELETE_COUNT})
            echo -e "删除 $TARGET"
            rm -rf $TARGET
          fi

  clear-artifacts:
    needs: [migrate, optimize, set-variables, clear-opcache-if-possible]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 当前用户
        run: whoami
      - name: 清理构件
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            .env
            deploy_env
            deploy_key
            deploy_host
